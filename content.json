{"meta":{"title":"lliugh 的博客","subtitle":null,"description":"一只特立独行的猪","author":"lliugh","url":"https://gitee.com/lliugh/blog","root":"/blog/"},"pages":[{"title":"tags","date":"2019-10-21T03:35:01.000Z","updated":"2019-10-21T03:35:01.789Z","comments":true,"path":"tags/index-1.html","permalink":"https://gitee.com/lliugh/blog/tags/index-1.html","excerpt":"","text":""},{"title":"标签","date":"2018-02-13T08:26:49.000Z","updated":"2018-02-13T08:27:27.000Z","comments":true,"path":"tags/index.html","permalink":"https://gitee.com/lliugh/blog/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"在 CentOS 7 中安装 Nextcloud","slug":"在-CentOS-7-中安装-Nextcloud","date":"2022-08-23T14:48:35.000Z","updated":"2022-08-23T14:48:35.185Z","comments":true,"path":"2022/08/23/在-CentOS-7-中安装-Nextcloud/","link":"","permalink":"https://gitee.com/lliugh/blog/2022/08/23/%E5%9C%A8-CentOS-7-%E4%B8%AD%E5%AE%89%E8%A3%85-Nextcloud/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"cx_Oracle引入失败导致crontab无法工作","slug":"cx_Oracle引入失败导致crontab无法工作","date":"2019-10-21T03:24:00.963Z","updated":"2019-10-21T05:20:27.631Z","comments":true,"path":"2019/10/21/cx_Oracle引入失败导致crontab无法工作/","link":"","permalink":"https://gitee.com/lliugh/blog/2019/10/21/cx_Oracle%E5%BC%95%E5%85%A5%E5%A4%B1%E8%B4%A5%E5%AF%BC%E8%87%B4crontab%E6%97%A0%E6%B3%95%E5%B7%A5%E4%BD%9C/","excerpt":"","text":"版权声明：本文为CSDN博主「水墨小龙虾」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。本文链接：https://blog.csdn.net/jianhong1990/article/details/22167373 今天遇到一个问题： 一个python脚本命令行运行时很正常，放到crontab中就无法工作，日志也没有记录，找了半天，终于发现问题所在。 在脚本最上方，程序如下： 12345#!/usr/local/bin python# coding=utf8import cx_Oracleimport sysimport time 注意，这里 1import cx_Oracle cx_Oracle需要依赖oracle的ORACLE_HOME环境。我发现ORACLE_HOME定义在&#x2F;etc&#x2F;profile下，在这里修改的内容是对所有用户起作用的，但是对crontab是不起作用的。以下是各个文件的一个作用域： &#x2F;etc&#x2F;profile： 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行. 并从&#x2F;etc&#x2F;profile.d目录的配置文件中搜集shell的设置。 &#x2F;etc&#x2F;bashrc: 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取。 ~&#x2F;.bash_profile: 每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件。 ~&#x2F;.bashrc: 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该该文件被读取。 &#x2F;.bash_logout: 当每次退出系统(退出bash shell)时,执行该文件. 另外,&#x2F;etc&#x2F;profile中设定的变量(全局)的可以作用于任何用户,而&#x2F;.bashrc等中设定的变量(局部)只能继承 &#x2F;etc&#x2F;profile中的变量,他们是”父子”关系。 &#x2F;.bash_profile 是交互式、login 方式进入 bash 运行的&#x2F;.bashrc 是交互式 non-login 方式进入 bash 运行的通常二者设置大致相同，所以通常前者会调用后者。 解决办法： 130 7 * * * . /etc/profile; /usr/local/bin/python2.7 /data/storeDataToOracleDB.py &amp; 这里加上了 1. /etc/profile; ok，问题解决。","categories":[],"tags":[{"name":"工作","slug":"工作","permalink":"https://gitee.com/lliugh/blog/tags/%E5%B7%A5%E4%BD%9C/"}]},{"title":"分布式系统","slug":"分布式系统","date":"2019-03-02T14:25:20.000Z","updated":"2019-03-02T14:42:08.000Z","comments":true,"path":"2019/03/02/分布式系统/","link":"","permalink":"https://gitee.com/lliugh/blog/2019/03/02/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"作者：大闲人柴毛毛 链接：https://www.zhihu.com/question/20004877/answer/282033178 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 单机结构我想大家最最最熟悉的就是单机结构，一个系统业务量很小的时候所有的代码都放在一个项目中就好了，然后这个项目部署在一台服务器上就好了。整个项目所有的服务都由这台服务器提供。这就是单机结构。那么，单机结构有啥缺点呢？我想缺点是显而易见的，单机的处理能力毕竟是有限的，当你的业务增长到一定程度的时候，单机的硬件资源将无法满足你的业务需求。此时便出现了集群模式，往下接着看。集群结构集群模式在程序猿界有各种装逼解释，有的让你根本无法理解，其实就是一个很简单的玩意儿，且听我一一道来。单机处理到达瓶颈的时候，你就把单机复制几份，这样就构成了一个“集群”。集群中每台服务器就叫做这个集群的一个“节点”，所有节点构成了一个集群。每个节点都提供相同的服务，那么这样系统的处理能力就相当于提升了好几倍（有几个节点就相当于提升了这么多倍）。但问题是用户的请求究竟由哪个节点来处理呢？最好能够让此时此刻负载较小的节点来处理，这样使得每个节点的压力都比较平均。要实现这个功能，就需要在所有节点之前增加一个“调度者”的角色，用户的所有请求都先交给它，然后它根据当前所有节点的负载情况，决定将这个请求交给哪个节点处理。这个“调度者”有个牛逼了名字——负载均衡服务器。集群结构的好处就是系统扩展非常容易。如果随着你们系统业务的发展，当前的系统又支撑不住了，那么给这个集群再增加节点就行了。但是，当你的业务发展到一定程度的时候，你会发现一个问题——无论怎么增加节点，貌似整个集群性能的提升效果并不明显了。这时候，你就需要使用微服务结构了。分布式结构先来对前面的知识点做个总结。从单机结构到集群结构，你的代码基本无需要作任何修改，你要做的仅仅是多部署几台服务器，每台服务器上运行相同的代码就行了。但是，当你要从集群结构演进到微服务结构的时候，之前的那套代码就需要发生较大的改动了。所以对于新系统我们建议，系统设计之初就采用微服务架构，这样后期运维的成本更低。但如果一套老系统需要升级成微服务结构的话，那就得对代码大动干戈了。所以，对于老系统而言，究竟是继续保持集群模式，还是升级成微服务架构，这需要你们的架构师深思熟虑、权衡投入产出比。OK，下面开始介绍所谓的分布式结构。分布式结构就是将一个完整的系统，按照业务功能，拆分成一个个独立的子系统，在分布式结构中，每个子系统就被称为“服务”。这些子系统能够独立运行在web容器中，它们之间通过RPC方式通信。举个例子，假设需要开发一个在线商城。按照微服务的思想，我们需要按照功能模块拆分成多个独立的服务，如：用户服务、产品服务、订单服务、后台管理服务、数据分析服务等等。这一个个服务都是一个个独立的项目，可以独立运行。如果服务之间有依赖关系，那么通过RPC方式调用。这样的好处有很多： 系统之间的耦合度大大降低，可以独立开发、独立部署、独立测试，系统与系统之间的边界非常明确，排错也变得相当容易，开发效率大大提升。 系统之间的耦合度降低，从而系统更易于扩展。我们可以针对性地扩展某些服务。假设这个商城要搞一次大促，下单量可能会大大提升，因此我们可以针对性地提升订单系统、产品系统的节点数量，而对于后台管理系统、数据分析系统而言，节点数量维持原有水平即可。 服务的复用性更高。比如，当我们将用户系统作为单独的服务后，该公司所有的产品都可以使用该系统作为用户系统，无需重复开发。","categories":[],"tags":[{"name":"工作","slug":"工作","permalink":"https://gitee.com/lliugh/blog/tags/%E5%B7%A5%E4%BD%9C/"}]},{"title":"一文了解 OutOfMemory 及解决方案","slug":"一文了解 OutOfMemory 及解决方案","date":"2019-02-13T03:09:08.000Z","updated":"2019-02-13T03:33:21.000Z","comments":true,"path":"2019/02/13/一文了解 OutOfMemory 及解决方案/","link":"","permalink":"https://gitee.com/lliugh/blog/2019/02/13/%E4%B8%80%E6%96%87%E4%BA%86%E8%A7%A3%20OutOfMemory%20%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","excerpt":"","text":"来自：唐尤华 译自：https://bloggceasy.files.wordpress.com/2015/05/outofmemoryerror2.pdf 1. Java 堆空间发生频率5颗星 造成原因 无法在 Java 堆中分配对象 吞吐量增加 应用程序无意中保存了对象引用，对象无法被 GC 回收 应用程序过度使用 finalizer。finalizer 对象不能被 GC 立刻回收。finalizer 由结束队列服务的守护线程调用，有时 finalizer 线程的处理能力无法跟上结束队列的增长 解决方案 单位对应：GB -&gt; G, g；MB -&gt; M, m；KB -&gt; K, k 使用 -Xmx 增加堆大小 修复应用程序中的内存泄漏 2. GC 开销超过限制发生频率5颗星 造成原因 Java 进程98%的时间在进行垃圾回收，恢复了不到2%的堆空间，最后连续5个（编译时常量）垃圾回收一直如此。 解决方案 使用 -Xmx 增加堆大小 使用 -XX:-UseGCOverheadLimit 取消 GC 开销限制 修复应用程序中的内存泄漏 3. 请求的数组大小超过虚拟机限制发生频率2颗星 造成原因 应用程序试图分配一个超过堆大小的数组 解决方案 使用 -Xmx 增加堆大小 修复应用程序中分配巨大数组的 bug 4. Permgen 空间发生频率3颗星 造成原因 Permgen 空间包含： 类的名字、字段、方法 与类相关的对象数组和类型数组 JIT 编译器优化 当 Permgen 空间用尽时，将抛出异常。 解决方案 使用 -XX: MaxPermSize 增加 Permgen 大小 不重启应用部署应用程序可能会导致此问题。重启 JVM 解决 5. Metaspace发生频率3颗星 造成原因 从 Java 8 开始 Permgen 改成了 Metaspace，在本机内存中分配 class 元数据（称为 metaspace）。如果 metaspace 耗尽，则抛出异常 解决方案 通过命令行设置 -XX: MaxMetaSpaceSize 增加 metaspace 大小 取消 -XX: maxmetsspacedize 减小 Java 堆大小,为 MetaSpace 提供更多的可用空间 为服务器分配更多的内存 可能是应用程序 bug，修复 bug 6. 无法新建本机线程发生频率5颗星 造成原因 内存不足，无法创建新线程。由于线程在本机内存中创建，报告这个错误表明本机内存空间不足 解决方案 为机器分配更多的内存 减少 Java 堆空间 修复应用程序中的线程泄漏。 增加操作系统级别的限制 ulimit -a 用户进程数增大 (-u) 1800 使用 -Xss 减小线程堆栈大小 7. 杀死进程或子进程发生频率1颗星 造成原因 内核任务：内存不足结束器，在可用内存极低的情况下会杀死进程 解决方案 将进程迁移到不同的机器上 给机器增加更多内存 与其他 OOM 错误不同，这是由操作系统而非 JVM 触发的。 8. 发生 stack_trace_with_native_method发生频率1颗星 造成原因 本机方法（native method）分配失败 打印的堆栈跟踪信息，最顶层的帧是本机方法 解决方案 使用操作系统本地工具进行诊断","categories":[],"tags":[{"name":"工作","slug":"工作","permalink":"https://gitee.com/lliugh/blog/tags/%E5%B7%A5%E4%BD%9C/"}]},{"title":"Nginx处理图片注意事项","slug":"Nginx处理图片注意事项","date":"2019-02-13T03:04:29.000Z","updated":"2019-02-13T03:04:31.000Z","comments":true,"path":"2019/02/13/Nginx处理图片注意事项/","link":"","permalink":"https://gitee.com/lliugh/blog/2019/02/13/Nginx%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/","excerpt":"","text":"IO流量问题当所有图片改为动态裁剪时，源位置只保留一张大尺寸图片，每次裁切时对存储图片的机器网卡IO要求较高。即使只使用一张小图，对后台来说，也是读取了一次全尺寸大图 解决方案如图片量很大，加入CDN做第一道缓存Nginx加入图片缓存 ，做第二道缓存","categories":[],"tags":[{"name":"工作","slug":"工作","permalink":"https://gitee.com/lliugh/blog/tags/%E5%B7%A5%E4%BD%9C/"}]},{"title":"SLF4J报错的解决","slug":"SLF4J报错的解决","date":"2018-03-07T02:38:23.000Z","updated":"2018-03-07T02:41:06.000Z","comments":true,"path":"2018/03/07/SLF4J报错的解决/","link":"","permalink":"https://gitee.com/lliugh/blog/2018/03/07/SLF4J%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3/","excerpt":"","text":"项目未能启动，查看日志，报错为java.lang.NoClassDefFoundError: org&#x2F;slf4j&#x2F;event&#x2F;LoggingEvent 实际问题Logback-classic version 1.1.4及其以后的版本需要1.7.15及其以上版本的slf4j-api。 记住这个问题只会出现在1.1.4及其以后的logback版本，其他的绑定，例如slf4j-log4j, slf4j-jdk14 and slf4j-simple是不受影响的。","categories":[],"tags":[{"name":"Java","slug":"Java","permalink":"https://gitee.com/lliugh/blog/tags/Java/"}]},{"title":"Nginx操作图片","slug":"Nginx操作图片","date":"2018-02-15T04:02:31.000Z","updated":"2018-02-26T08:44:56.000Z","comments":true,"path":"2018/02/15/Nginx操作图片/","link":"","permalink":"https://gitee.com/lliugh/blog/2018/02/15/Nginx%E6%93%8D%E4%BD%9C%E5%9B%BE%E7%89%87/","excerpt":"","text":"打水印版nginx安装过程(centos) 安装依赖组件 sudo yum install gd-devel pcre-devel libcurl-devel 下载Nginx (1) 下载 wget http://nginx.org/download/nginx-1.9.6.tar.gz(2) 解压 tar -zxvf nginx-1.9.6.tar.gz(3) 进入目录 cd nginx-1.9.6 下载水印功能源代码 https://github.com/intaro/nginx-image-filter-watermark点击download zip下载 覆盖Nginx中的代码 将下载的zip解压，将其中的ngx_http_image_filter_module.c文件覆盖到nginx源码中（&#x2F;src&#x2F;http&#x2F;modules&#x2F;http_image_filter_module.c） 编译安装Nginx（假设Nginx源码在usr&#x2F;local&#x2F;nginx&#x2F;nginx-1.9.6中）1234./configure --with-http_image_filter_module --with-http_stub_status_module --with-http_ssl_module --with-http_sub_module --prefix=/usr/local/nginx/nginx-1.9.6 make make install 配置123456789101112131415161718192021222324252627282930313233Example Usage Base Usage: location /img/ &#123; image_filter watermark;#开启水印 image_filter_watermark &quot;PATH_TO_FILE&quot;;#水印文件位置 image_filter_watermark_position center-center;#水印位置 image_filter_jpeg_quality 95;#图片质量 image_filter_buffer 20M;#缓存 image_filter_watermark_width_from 400; # 打水印的图片最小宽带，只有大于这个宽带的才会打水印 image_filter_watermark_height_from 400; #打水印的图片最小高度，只有大于这个高度的才会打水印 &#125; Usage with resize and crop: location ~ ^/r/(\\d+|-)x(\\d+|-)/c/(\\d+|-)x(\\d+|-)/(.+) &#123; set $resize_width $1; set $resize_height $2; set $crop_width $3; set $crop_height $4; alias /Users/goshan/Sites/Zot/Zot/web/$5; try_files &quot;&quot; @404; image_filter resize $resize_width $resize_height; image_filter crop $crop_width $crop_height; image_filter_jpeg_quality 95; image_filter_buffer 2M; image_filter_watermark_width_from 400; # Minimal width (after resize) of when to use watermark image_filter_watermark_height_from 400; # Minimal height (after resize) of when to use watermark image_filter_watermark &quot;PATH_TO_FILE&quot;; image_filter_watermark_position center-center; &#125; 注意事项 (1) 水印文件必须是背景透明的文件(2) 如果要打水印的图片文件会很大，需将image_filter_buffer设置大一些，比如20M","categories":[],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://gitee.com/lliugh/blog/tags/Nginx/"}]},{"title":"2018年春节","slug":"2018年春节","date":"2018-02-15T03:04:36.000Z","updated":"2018-03-07T02:47:34.000Z","comments":true,"path":"2018/02/15/2018年春节/","link":"","permalink":"https://gitee.com/lliugh/blog/2018/02/15/2018%E5%B9%B4%E6%98%A5%E8%8A%82/","excerpt":"","text":"2017总结17年经历了比较多的东西，技术学习也荒废了，编码能力严重退化。 2018展望18、18、18、18、18、18、18、18、18","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://gitee.com/lliugh/blog/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"elastic-job定时任务使用","slug":"elastic-job定时任务使用","date":"2018-02-13T06:57:22.000Z","updated":"2018-02-13T07:31:35.000Z","comments":true,"path":"2018/02/13/elastic-job定时任务使用/","link":"","permalink":"https://gitee.com/lliugh/blog/2018/02/13/elastic-job%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%BD%BF%E7%94%A8/","excerpt":"","text":"1.首先引入maven仓库12345678910111213&lt;!-- 引入elastic-job核心模块 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.dangdang&lt;/groupId&gt; &lt;artifactId&gt;elastic-job-core&lt;/artifactId&gt; &lt;version&gt;1.1.0&lt;/version&gt;&lt;/dependency&gt;&lt;!-- 使用springframework自定义命名空间时引入 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.dangdang&lt;/groupId&gt; &lt;artifactId&gt;elastic-job-spring&lt;/artifactId&gt; &lt;version&gt;1.1.0&lt;/version&gt;&lt;/dependency&gt;","categories":[],"tags":[]},{"title":"安装Tomcat日志拆分","slug":"安装Tomcat日志拆分","date":"2018-02-12T03:59:13.000Z","updated":"2018-02-24T02:26:04.000Z","comments":true,"path":"2018/02/12/安装Tomcat日志拆分/","link":"","permalink":"https://gitee.com/lliugh/blog/2018/02/12/%E5%AE%89%E8%A3%85Tomcat%E6%97%A5%E5%BF%97%E6%8B%86%E5%88%86/","excerpt":"","text":"使用root用户安装下载cronolog1wget https://files.cnblogs.com/files/crazyzero/cronolog-1.6.2.tar.gz 安装cronolog12345tar -zxvf cronolog-1.6.2.tar.gzcd cronolog-1.6.2/./configuremakemake install 确认是否安装1/usr/local/sbin/cronolog 修改Tomcat运行文件catalina.sh1234567修改 org.apache.catalina.startup.Bootstrap &quot;$@&quot; start &gt;&gt; &quot;$CATALINA_OUT&quot; 2&gt;&amp;1 &quot;&amp;&quot;为 org.apache.catalina.startup.Bootstrap &quot;$@&quot; start 2&gt;&amp;1 | /usr/local/sbin/cronolog &quot;$CATALINA_BASE&quot;/logs/catalina.%Y-%m-%d.out &gt;&gt; /dev/null &amp;","categories":[],"tags":[{"name":"Tomcat","slug":"Tomcat","permalink":"https://gitee.com/lliugh/blog/tags/Tomcat/"}]},{"title":"CentOS安装Redis","slug":"CentOS安装Redis","date":"2018-02-12T01:22:40.000Z","updated":"2018-02-12T04:29:42.000Z","comments":true,"path":"2018/02/12/CentOS安装Redis/","link":"","permalink":"https://gitee.com/lliugh/blog/2018/02/12/CentOS%E5%AE%89%E8%A3%85Redis/","excerpt":"","text":"安装系统依赖123yum install gcc-c++yum install -y tclyum install wget 下载redis包1wget http://download.redis.io/releases/redis-4.0.8.tar.gz 新建程序目录，并将tar包拷贝到目录中，解压12mkdir /datatar -zxvf redis-4.0.8.tar.gz 进入目录并安装123cd /data/redis-4.0.8/makemake install (此命令需要Root权限，程序会自动将redis-server拷贝到/usr/local/bin下) 修改配置文件12345mkdir -p /etc/redis cp /data/redis-4.0.8/redis.conf /etc/redis/ (将配置文件拷贝到etc目录下)修改bindbind 0.0.0.0 (任何IP都可访问些Redis)daemonize no --&gt; yes (Redis以后台方式运行) 启动redis (不需要root用户)1/usr/local/bin/redis-server /etc/redis/redis.conf","categories":[],"tags":[]},{"title":"将hexo博客同时托管到github和码云","slug":"将hexo博客同时托管到github和coding","date":"2018-02-11T14:28:25.000Z","updated":"2018-02-12T04:29:48.000Z","comments":true,"path":"2018/02/11/将hexo博客同时托管到github和coding/","link":"","permalink":"https://gitee.com/lliugh/blog/2018/02/11/%E5%B0%86hexo%E5%8D%9A%E5%AE%A2%E5%90%8C%E6%97%B6%E6%89%98%E7%AE%A1%E5%88%B0github%E5%92%8Ccoding/","excerpt":"","text":"配置文件写成如下形式(_config.yml)1234567deploy:- type: git repo: &#123;giturl&#125; branch: master- type: git repo: &#123;giturl&#125; branch: master","categories":[],"tags":[]},{"title":"增加mybatis日志","slug":"增加mybatis日志","date":"2018-02-11T10:25:34.000Z","updated":"2018-02-13T08:29:00.000Z","comments":true,"path":"2018/02/11/增加mybatis日志/","link":"","permalink":"https://gitee.com/lliugh/blog/2018/02/11/%E5%A2%9E%E5%8A%A0mybatis%E6%97%A5%E5%BF%97/","excerpt":"","text":"修改工程web.xml，加入123456789101112&lt;context-param&gt; &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath:log4j.properties&lt;/param-value&gt;&lt;/context-param&gt;&lt;context-param&gt; &lt;param-name&gt;log4jRefreshInterval&lt;/param-name&gt; &lt;param-value&gt;6000&lt;/param-value&gt;&lt;/context-param&gt;&lt;listener&gt; &lt;listener-class&gt;org.springframework.web.util.Log4jConfigListener&lt;/listener-class&gt;&lt;/listener&gt; 增加log4j.properties123456789101112131415161718192021222324252627282930313233343536373839###设置Logger输出级别和输出目的地###debug更详细,如果设为info那么打印出的表数据遇到字符串就不显示，此外还有logfilelog4j.rootLogger=info,stdout,D,E###把日志信息输出到控制台###log4j.appender.stdout=org.apache.log4j.ConsoleAppender#log4j.appender.stdout.Target=System.errlog4j.appender.stdout.layout=org.apache.log4j.SimpleLayout###把日志信息输出到文件：jbit.log###log4j.appender.logfile=org.apache.log4j.FileAppenderlog4j.appender.logfile.File=logs/Yimi/YimiInfo.loglog4j.appender.logfile.layout=org.apache.log4j.PatternLayoutlog4j.appender.logfile.layout.ConversionPattern=%d&#123;yyyy-MM-ddHH:mm:ss&#125;%F%p%m%n###输出DEBUG级别以上的日志到###log4j.appender.D=org.apache.log4j.DailyRollingFileAppenderlog4j.appender.D.File=logs/Yimi/YimiDebug.loglog4j.appender.D.Append=truelog4j.appender.D.Threshold=DEBUGlog4j.appender.D.layout=org.apache.log4j.PatternLayoutlog4j.appender.D.layout.ConversionPattern=%-d&#123;yyyy-MM-ddHH:mm:ss&#125;[%t:%r]-[%p]%m%n###输出ERROR级别以上的日志到###log4j.appender.E=org.apache.log4j.DailyRollingFileAppenderlog4j.appender.E.File=Yimi/YimiError.loglog4j.appender.E.Append=truelog4j.appender.E.Threshold=ERRORlog4j.appender.E.layout=org.apache.log4j.PatternLayoutlog4j.appender.E.layout.ConversionPattern=%-d&#123;yyyy-MM-ddHH:mm:ss&#125;[%t:%r]-[%p]%m%n###显示SQL语句部分log4j.logger.com.mybatis=INFOlog4j.logger.com.mybatis.common.jdbc.SimpleDataSource=INFOlog4j.logger.com.mybatis.common.jdbc.ScriptRunner=INFOlog4j.logger.com.mybatis.sqlmap.engine.impl.SqlMapClientDelegate=INFOlog4j.logger.java.sql.Connection=INFOlog4j.logger.java.sql.Statement=INFOlog4j.logger.java.sql.PreparedStatement=INFOlog4j.logger.java.sql.ResultSet=INFO 修改工程mybatis.xml，增加以下配置1&lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot; /&gt;","categories":[],"tags":[{"name":"Tomcat","slug":"Tomcat","permalink":"https://gitee.com/lliugh/blog/tags/Tomcat/"},{"name":"日志","slug":"日志","permalink":"https://gitee.com/lliugh/blog/tags/%E6%97%A5%E5%BF%97/"},{"name":"Mybatis","slug":"Mybatis","permalink":"https://gitee.com/lliugh/blog/tags/Mybatis/"}]},{"title":"微服务开发的12项要素","slug":"微服务开发的12项要素","date":"2016-07-16T03:27:50.000Z","updated":"2016-07-16T05:12:10.000Z","comments":true,"path":"2016/07/16/微服务开发的12项要素/","link":"","permalink":"https://gitee.com/lliugh/blog/2016/07/16/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91%E7%9A%8412%E9%A1%B9%E8%A6%81%E7%B4%A0/","excerpt":"","text":"spring cloud官方文档提到的服务开发的12项要素。 I. Codebase从一个代码库部署到多个环境。 II. Dependencies使用显式的声明隔离依赖，即模块单独运行，并可以显式管理依赖。 III. Config*在系统外部存储配置信息。 IV. Backing Services把支持性服务看做是资源，支持性服务包括数据库、消息队列、缓冲服务器等。 V. Build, release, run严格的划分编译、构建、运行阶段，每个阶段由工具进行管理。 VI. Processes应用作为无状态执行。 VII. Port binding经由端口绑定导出服务，优先选择 HTTP API 作为通用的集成框架。 VIII. Concurrency并发性使用水平扩展实现，对于web就是水平扩展web应用实现。 IX. Disposability服务可处置性，任何服务可以随意终止或启动。 X. Dev&#x2F;prod parity开发和生产环境保持高度一致，一键式部署。 XI. Logs将日志看做是事件流来管理，所有参与的服务均使用该方式处理日志。 XII. Admin processes管理任务作为一次性的过程运行（使用脚本管理服务启动和停止）。 转自：http://www.cnblogs.com/skyblog/p/5099140.html","categories":[],"tags":[]},{"title":"URL的ASCII码表","slug":"URL的ASCII码表","date":"2016-06-27T02:37:22.000Z","updated":"2016-06-27T02:45:08.000Z","comments":true,"path":"2016/06/27/URL的ASCII码表/","link":"","permalink":"https://gitee.com/lliugh/blog/2016/06/27/URL%E7%9A%84ASCII%E7%A0%81%E8%A1%A8/","excerpt":"","text":"ASCII字符 字符中文名 编码后的值 ‘ ‘ 空格 %20 ‘!’ 感叹号 %21 ‘&amp;’ 花at %26 ‘&#x2F;’ 斜杠 %2F ‘:’ 冒号) %3A ‘&#x3D;’ 等于号 %3D ‘?’ 问号 %3F ‘~’ 波浪号 %7E","categories":[],"tags":[]},{"title":"Tomcat+Nginx反向代理配置","slug":"Tomcat-Nginx反向代理配置","date":"2016-06-27T01:28:40.000Z","updated":"2018-02-13T08:28:24.000Z","comments":true,"path":"2016/06/27/Tomcat-Nginx反向代理配置/","link":"","permalink":"https://gitee.com/lliugh/blog/2016/06/27/Tomcat-Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE/","excerpt":"","text":"123456789101112131415&lt;VirtualHost *&gt; ServerName www.cahomeca.com ErrorLog logs/cahomeca-error_log CustomLog logs/cahomeca-access_log common ProxyPreserveHost On ProxyRequests Off ProxyPass / http://127.0.0.1:8080/ ProxyPassReverse / http://127.0.0.1:8080/ &lt;proxy http://127.0.0.1:8080&gt; AllowOverride None Order Deny,Allow Allow from all &lt;/proxy&gt;&lt;/VirtualHost&gt;","categories":[],"tags":[{"name":"Tomcat","slug":"Tomcat","permalink":"https://gitee.com/lliugh/blog/tags/Tomcat/"}]},{"title":"Hello World","slug":"hello-world","date":"2016-06-26T15:24:02.000Z","updated":"2016-06-26T15:24:02.000Z","comments":true,"path":"2016/06/26/hello-world/","link":"","permalink":"https://gitee.com/lliugh/blog/2016/06/26/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"工作","slug":"工作","permalink":"https://gitee.com/lliugh/blog/tags/%E5%B7%A5%E4%BD%9C/"},{"name":"Java","slug":"Java","permalink":"https://gitee.com/lliugh/blog/tags/Java/"},{"name":"Nginx","slug":"Nginx","permalink":"https://gitee.com/lliugh/blog/tags/Nginx/"},{"name":"随笔","slug":"随笔","permalink":"https://gitee.com/lliugh/blog/tags/%E9%9A%8F%E7%AC%94/"},{"name":"Tomcat","slug":"Tomcat","permalink":"https://gitee.com/lliugh/blog/tags/Tomcat/"},{"name":"日志","slug":"日志","permalink":"https://gitee.com/lliugh/blog/tags/%E6%97%A5%E5%BF%97/"},{"name":"Mybatis","slug":"Mybatis","permalink":"https://gitee.com/lliugh/blog/tags/Mybatis/"}]}